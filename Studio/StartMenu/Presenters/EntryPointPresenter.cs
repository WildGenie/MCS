using Advent.Common;
using Advent.Common.UI;
using Advent.MediaCenter.StartMenu.OEM;
using Advent.VmcExecute;
using Advent.VmcStudio;
using Microsoft.MediaCenter;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Xml.Serialization;

namespace Advent.VmcStudio.StartMenu.Presenters
{
    internal enum EntryPointType
    {
        Exe,
        AddIn,
        Url,
        VmcExecute,
    }

    internal class EntryPointPresenter : NotifyPropertyChangedBase
    {
        public static readonly MediaCenterPagePresenter NoPage = new MediaCenterPagePresenter("None", new PageId?(), (string)null, (string)null);
        public static readonly NowPlayingDirectivePresenter NoActionDirective = new NowPlayingDirectivePresenter("Nothing", (string)null);
        private static IEnumerable<EntryPointCapabilities> entryPointCaps;
        private static IEnumerable<NowPlayingDirectivePresenter> nowPlayingDirectives;
        private static IEnumerable<MediaCenterPagePresenter> mediaCenterPages;
        private Advent.MediaCenter.StartMenu.OEM.EntryPoint entryPoint;
        private ExecutionInfo vmcExecuteInfo;
        private bool isImageAutoGenerated;
        private bool isInactiveImageAutoGenerated;

        public static IEnumerable<NowPlayingDirectivePresenter> NowPlayingDirectives
        {
            get
            {
                if (EntryPointPresenter.nowPlayingDirectives == null)
                    EntryPointPresenter.nowPlayingDirectives = (IEnumerable<NowPlayingDirectivePresenter>)new List<NowPlayingDirectivePresenter>()
          {
            EntryPointPresenter.NoActionDirective,
            new NowPlayingDirectivePresenter("Stop the currently playing media", "stop"),
            new NowPlayingDirectivePresenter("Pause the currently playing media", "pause"),
            new NowPlayingDirectivePresenter("Mute the currently playing media", "mute"),
            new NowPlayingDirectivePresenter("Close the Now Playing view port", "close")
          };
                return EntryPointPresenter.nowPlayingDirectives;
            }
        }

        public static IEnumerable<MediaCenterPagePresenter> MediaCenterPages
        {
            get
            {
                if (EntryPointPresenter.mediaCenterPages == null)
                    EntryPointPresenter.mediaCenterPages = (IEnumerable<MediaCenterPagePresenter>)new List<MediaCenterPagePresenter>()
          {
            EntryPointPresenter.NoPage,
            new MediaCenterPagePresenter("FM Radio", new PageId?(PageId.FMRadio), "res://ehres!STARTMENU.QUICKLINK.RADIO.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.RADIO.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Internet Radio", new PageId?(PageId.InternetRadio), "res://ehres!STARTMENU.QUICKLINK.RADIO.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.RADIO.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Live TV", new PageId?(PageId.LiveTV), "res://ehres!STARTMENU.QUICKLINK.LIVETV.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.LIVETV.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Manage Disks", new PageId?(PageId.ManageDisks), (string) null, (string) null),
            new MediaCenterPagePresenter("More Programs", new PageId?(PageId.MorePrograms), "res://ehres!STARTMENU.QUICKLINK.EXTRAS.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.EXTRAS.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Movie Library", new PageId?(PageId.MovieLibrary), "res://ehres!STARTMENU.QUICKLINK.MOVIES.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.MOVIES.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Music", new PageId?(PageId.MyMusic), "res://ehres!STARTMENU.QUICKLINK.MUSIC.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.MUSIC.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Music (albums)", new PageId?(PageId.MusicAlbums), "res://ehres!STARTMENU.QUICKLINK.MUSIC.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.MUSIC.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Music (artists)", new PageId?(PageId.MusicArtists), "res://ehres!STARTMENU.QUICKLINK.MUSIC.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.MUSIC.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Music (songs)", new PageId?(PageId.MusicSongs), "res://ehres!STARTMENU.QUICKLINK.MUSIC.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.MUSIC.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Pictures", new PageId?(PageId.MyPictures), "res://ehres!STARTMENU.QUICKLINK.PICTURES.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.PICTURES.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("TV", new PageId?(PageId.MyTV), "res://ehres!STARTMENU.QUICKLINK.LIVETV.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.LIVETV.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Videos", new PageId?(PageId.MyVideos), "res://ehres!STARTMENU.QUICKLINK.VIDEOS.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.VIDEOS.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Photo Details", new PageId?(PageId.PhotoDetails), (string) null, (string) null),
            new MediaCenterPagePresenter("Recorded TV", new PageId?(PageId.RecordedTV), "res://ehres!STARTMENU.QUICKLINK.RECORDEDTV.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.RECORDEDTV.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Recorder Storage Settings", new PageId?(PageId.RecorderStorageSettings), (string) null, (string) null),
            new MediaCenterPagePresenter("Scheduled TV Recordings", new PageId?(PageId.ScheduledTVRecordings), (string) null, (string) null),
            new MediaCenterPagePresenter("Slideshow", new PageId?(PageId.Slideshow), (string) null, (string) null),
            new MediaCenterPagePresenter("Slideshow Settings", new PageId?(PageId.SlideshowSettings), (string) null, (string) null),
            new MediaCenterPagePresenter("TV Guide", new PageId?(PageId.TVGuide), "res://ehres!STARTMENU.QUICKLINK.GUIDE.FOCUS.PNG", "res://ehres!STARTMENU.QUICKLINK.GUIDE.NOFOCUS.PNG"),
            new MediaCenterPagePresenter("Visualizations", new PageId?(PageId.Visualizations), (string) null, (string) null)
          };
                return EntryPointPresenter.mediaCenterPages;
            }
        }

        public NowPlayingDirectivePresenter NowPlayingDirective
        {
            get
            {
                return Enumerable.FirstOrDefault<NowPlayingDirectivePresenter>(EntryPointPresenter.NowPlayingDirectives, (Func<NowPlayingDirectivePresenter, bool>)(o => o.Directive == this.entryPoint.NowPlayingDirective)) ?? EntryPointPresenter.NoActionDirective;
            }
            set
            {
                if (value == null)
                {
                    this.entryPoint.NowPlayingDirective = (string)null;
                }
                else
                {
                    if (!(value.Directive != this.entryPoint.NowPlayingDirective))
                        return;
                    this.entryPoint.NowPlayingDirective = value.Directive;
                }
            }
        }

        public bool IsImageAutoGenerated
        {
            get
            {
                if (this.isImageAutoGenerated)
                    return string.IsNullOrEmpty(this.Model.RawImageUrl);
                else
                    return false;
            }
            set
            {
                if (value)
                    this.Model.RawImageUrl = (string)null;
                this.isImageAutoGenerated = value;
                this.OnPropertyChanged("isImageAutoGenerated");
            }
        }

        public bool IsInactiveImageAutoGenerated
        {
            get
            {
                if (this.isInactiveImageAutoGenerated)
                    return string.IsNullOrEmpty(this.Model.InactiveImageUrl);
                else
                    return false;
            }
            set
            {
                if (value)
                    this.Model.InactiveImageUrl = (string)null;
                this.isInactiveImageAutoGenerated = value;
                this.OnPropertyChanged("isInactiveImageAutoGenerated");
            }
        }

        public MediaCenterPagePresenter TargetPage
        {
            get
            {
                return Enumerable.FirstOrDefault<MediaCenterPagePresenter>(EntryPointPresenter.MediaCenterPages, (Func<MediaCenterPagePresenter, bool>)(o =>
                {
                    PageId? local_0 = o.Page;
                    PageId? local_1 = this.vmcExecuteInfo.Page;
                    if (local_0.GetValueOrDefault() == local_1.GetValueOrDefault())
                        return local_0.HasValue == local_1.HasValue;
                    else
                        return false;
                })) ?? EntryPointPresenter.NoPage;
            }
            set
            {
                if (value == null)
                {
                    if (!this.vmcExecuteInfo.Page.HasValue)
                        return;
                    this.vmcExecuteInfo.Page = new PageId?();
                    this.Model.MarkAsDirty();
                }
                else
                {
                    PageId? page1 = value.Page;
                    PageId? page2 = this.vmcExecuteInfo.Page;
                    if ((page1.GetValueOrDefault() != page2.GetValueOrDefault() ? true : (page1.HasValue != page2.HasValue ? true : false)) == false)
                        return;
                    this.vmcExecuteInfo.Page = value.Page;
                    this.Model.MarkAsDirty();
                }
            }
        }

        public EntryPointType ExecutionType { get; private set; }

        public bool IsExecutionUrlReadOnly
        {
            get
            {
                return this.ExecutionType == EntryPointType.AddIn;
            }
        }

        public bool IsArgumentsReadOnly
        {
            get
            {
                return this.ExecutionType != EntryPointType.VmcExecute;
            }
        }

        public bool IsVmcExecute
        {
            get
            {
                return this.ExecutionType == EntryPointType.VmcExecute;
            }
        }

        public string Title
        {
            get
            {
                return this.entryPoint.Title;
            }
            set
            {
                if (!(this.entryPoint.Title != value))
                    return;
                this.entryPoint.Title = value;
                this.OnPropertyChanged("Title");
            }
        }

        public string ExecutionUrl
        {
            get
            {
                switch (this.ExecutionType)
                {
                    case EntryPointType.AddIn:
                        return this.entryPoint.AddIn;
                    case EntryPointType.Url:
                        return this.entryPoint.Url;
                    case EntryPointType.VmcExecute:
                        return this.vmcExecuteInfo.FileName;
                    default:
                        return this.entryPoint.Run;
                }
            }
            set
            {
                if (!(this.ExecutionUrl != value))
                    return;
                switch (this.ExecutionType)
                {
                    case EntryPointType.AddIn:
                        throw new InvalidOperationException("Cannot set the execution URL for add-in entry points.");
                    case EntryPointType.Url:
                        this.entryPoint.Url = value;
                        break;
                    case EntryPointType.VmcExecute:
                        if (this.vmcExecuteInfo.FileName != value)
                        {
                            this.vmcExecuteInfo.FileName = value;
                            this.Model.MarkAsDirty();
                            break;
                        }
                        else
                            break;
                    default:
                        this.entryPoint.Run = value;
                        break;
                }
                this.OnPropertyChanged("ExecutionUrl");
            }
        }

        public string Arguments
        {
            get
            {
                if (this.ExecutionType == EntryPointType.VmcExecute)
                    return this.vmcExecuteInfo.Arguments;
                else
                    return (string)null;
            }
            set
            {
                if (!(this.Arguments != value))
                    return;
                if (this.ExecutionType != EntryPointType.VmcExecute)
                    throw new InvalidOperationException("Arguments can only be set for VmcExecute entry points.");
                this.vmcExecuteInfo.Arguments = value;
                this.OnPropertyChanged("Arguments");
                this.Model.MarkAsDirty();
            }
        }

        public ObservableCollection<MediaInfoPresenter> Media { get; private set; }

        public ImageSource Image
        {
            get
            {
                if (this.entryPoint.ImageOverride != null)
                    return this.entryPoint.ImageOverride;
                else
                    return this.entryPoint.Image;
            }
            set
            {
                this.entryPoint.ImageOverride = value;
                this.OnPropertyChanged("Image");
                this.OnPropertyChanged("InactiveImage");
            }
        }

        public ImageSource InactiveImage
        {
            get
            {
                if (this.entryPoint.InactiveImageOverride != null)
                    return this.entryPoint.InactiveImageOverride;
                else
                    return this.entryPoint.NonFocusImage;
            }
            set
            {
                this.entryPoint.InactiveImageOverride = value;
                if (value == null)
                    this.entryPoint.InactiveImageUrl = (string)null;
                this.OnPropertyChanged("InactiveImage");
            }
        }

        public IEnumerable<EntryPointCapabilityPresenter> CapabilitiesRequired { get; private set; }

        public bool IsDirty
        {
            get
            {
                return this.entryPoint.IsDirty;
            }
        }

        public IList<Keys> CloseKeys { get; private set; }

        public IList<Keys> KillKeys { get; private set; }

        internal Advent.MediaCenter.StartMenu.OEM.EntryPoint Model
        {
            get
            {
                return this.entryPoint;
            }
        }

        private static IEnumerable<EntryPointCapabilities> PossibleCapabilities
        {
            get
            {
                if (EntryPointPresenter.entryPointCaps == null)
                    EntryPointPresenter.entryPointCaps = (IEnumerable<EntryPointCapabilities>)Enumerable.ToList<EntryPointCapabilities>(Enumerable.Where<EntryPointCapabilities>(Enumerable.Cast<EntryPointCapabilities>((IEnumerable)Enum.GetValues(typeof(EntryPointCapabilities))), (Func<EntryPointCapabilities, bool>)(o => o != EntryPointCapabilities.None)));
                return EntryPointPresenter.entryPointCaps;
            }
        }

        static EntryPointPresenter()
        {
        }

        public EntryPointPresenter(Advent.MediaCenter.StartMenu.OEM.EntryPoint entryPoint)
        {
            this.isImageAutoGenerated = true;
            this.isInactiveImageAutoGenerated = true;
            this.entryPoint = entryPoint;
            this.entryPoint.IsDirtyChanged += (EventHandler)delegate
            {
                this.OnPropertyChanged("IsDirty");
            };
            this.entryPoint.Saving += new EventHandler(this.EntryPointSaving);
            List<EntryPointCapabilityPresenter> list = new List<EntryPointCapabilityPresenter>();
            this.CapabilitiesRequired = (IEnumerable<EntryPointCapabilityPresenter>)list;
            foreach (EntryPointCapabilities capability in EntryPointPresenter.PossibleCapabilities)
                list.Add(new EntryPointCapabilityPresenter(this, capability));
            if (entryPoint.AddIn != null)
            {
                System.Type type = (System.Type)null;
                try
                {
                    type = System.Type.GetType(entryPoint.AddIn, false, false);
                }
                catch (Exception ex)
                {
                    Trace.TraceError(((object)ex).ToString());
                }
                if (type == typeof(VmcExecuteAddIn))
                {
                    this.ExecutionType = EntryPointType.VmcExecute;
                    this.vmcExecuteInfo = !string.IsNullOrEmpty(this.entryPoint.Context) ? (ExecutionInfo)new XmlSerializer(typeof(ExecutionInfo)).Deserialize((TextReader)new StringReader(this.entryPoint.Context)) : new ExecutionInfo();
                    if (this.vmcExecuteInfo.CloseKeys == null)
                        this.vmcExecuteInfo.CloseKeys = new List<Keys>();
                    if (this.vmcExecuteInfo.KillKeys == null)
                        this.vmcExecuteInfo.KillKeys = new List<Keys>();
                    ObservableCollection<Keys> observableCollection1 = new ObservableCollection<Keys>(this.vmcExecuteInfo.CloseKeys);
                    observableCollection1.CollectionChanged += (NotifyCollectionChangedEventHandler)delegate
                    {
                        this.Model.MarkAsDirty();
                    };
                    CollectionUtilities.StartReplicatingChangesTo<Keys>((INotifyCollectionChanged)observableCollection1, (ICollection<Keys>)this.vmcExecuteInfo.CloseKeys);
                    ObservableCollection<Keys> observableCollection2 = new ObservableCollection<Keys>(this.vmcExecuteInfo.KillKeys);
                    observableCollection2.CollectionChanged += (NotifyCollectionChangedEventHandler)delegate
                    {
                        this.Model.MarkAsDirty();
                    };
                    CollectionUtilities.StartReplicatingChangesTo<Keys>((INotifyCollectionChanged)observableCollection2, (ICollection<Keys>)this.vmcExecuteInfo.KillKeys);
                    this.CloseKeys = (IList<Keys>)observableCollection1;
                    this.KillKeys = (IList<Keys>)observableCollection2;
                    if (this.vmcExecuteInfo.Media == null)
                        this.vmcExecuteInfo.Media = new List<MediaInfo>();
                    ObservableCollection<MediaInfoPresenter> observableCollection3 = new ObservableCollection<MediaInfoPresenter>(Enumerable.Select<MediaInfo, MediaInfoPresenter>((IEnumerable<MediaInfo>)this.vmcExecuteInfo.Media, (Func<MediaInfo, MediaInfoPresenter>)(o => MediaInfoPresenter.Create(o))));
                    observableCollection3.CollectionChanged += (NotifyCollectionChangedEventHandler)delegate
                    {
                        this.Model.MarkAsDirty();
                    };
                    CollectionUtilities.StartReplicatingChangesTo<MediaInfo>((INotifyCollectionChanged)observableCollection3, (ICollection<MediaInfo>)this.vmcExecuteInfo.Media, true, (Func<object, MediaInfo>)(o => ((MediaInfoPresenter)o).MediaInfo));
                    this.Media = observableCollection3;
                }
                else
                    this.ExecutionType = EntryPointType.AddIn;
            }
            else if (entryPoint.Run != null)
            {
                this.ExecutionType = EntryPointType.Exe;
            }
            else
            {
                if (entryPoint.Url == null)
                    return;
                this.ExecutionType = EntryPointType.Url;
            }
        }

        private void EntryPointSaving(object sender, EventArgs e)
        {
            if (this.IsVmcExecute)
            {
                XmlSerializer xmlSerializer = new XmlSerializer(typeof(ExecutionInfo));
                StringBuilder sb = new StringBuilder();
                xmlSerializer.Serialize((TextWriter)new StringWriter(sb), (object)this.vmcExecuteInfo);
                this.Model.Context = ((object)sb).ToString();
            }
            if (this.Model.ImageOverride != null)
            {
                this.Model.RawImageUrl = this.CopyImageLocal(this.Model.ImageOverride, this.Model.ID + ".png");
                this.Model.ImageOverride = (ImageSource)null;
            }
            if (this.Model.InactiveImageOverride == null)
                return;
            this.Model.InactiveImageUrl = this.CopyImageLocal(this.Model.InactiveImageOverride, this.Model.ID + "_Inactive.png");
            this.Model.InactiveImageOverride = (ImageSource)null;
        }

        private string CopyImageLocal(ImageSource image, string filename)
        {
            string path = Path.Combine(Path.Combine(VmcStudioUtil.ApplicationDataPath, "Images\\EntryPoints"), filename);
            string directoryName = Path.GetDirectoryName(path);
            if (!Directory.Exists(directoryName))
                Directory.CreateDirectory(directoryName);
            using (FileStream fileStream = new FileStream(path, FileMode.Create))
            {
                PngBitmapEncoder pngBitmapEncoder = new PngBitmapEncoder();
                pngBitmapEncoder.Frames.Add(BitmapFrame.Create((BitmapSource)image));
                pngBitmapEncoder.Save((Stream)fileStream);
            }
            return path;
        }
    }
}
